<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>直升机，不是直升飞机</title>
      <link href="/p/330e82f5.html"/>
      <url>/p/330e82f5.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 飞机资料整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 航空 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧洲直升机</title>
      <link href="/p/ed3590dd.html"/>
      <url>/p/ed3590dd.html</url>
      
        <content type="html"><![CDATA[<h4 id="EH-101-AM-101-绰号：Merlin-灰背隼"><a href="#EH-101-AM-101-绰号：Merlin-灰背隼" class="headerlink" title="EH-101 (AM-101),绰号：Merlin(灰背隼)"></a>EH-101 (AM-101),绰号：Merlin(灰背隼)</h4><p>&emsp;&emsp;由英国<a href="https://chinois.jinzhao.wiki/w/index.php?title=%E7%B6%AD%E6%96%AF%E7%89%B9%E8%98%AD%E7%9B%B4%E5%8D%87%E6%A9%9F%E5%85%AC%E5%8F%B8&action=edit&redlink=1">韦斯特兰直升机公司</a>和意大利<a href="https://chinois.jinzhao.wiki/w/index.php?title=%E5%A5%A7%E5%8F%A4%E6%96%AF%E5%A1%94%E5%85%AC%E5%8F%B8&action=edit&redlink=1">阿古斯塔公司</a>共同研发,是一款中型军民两用直升机。具有全天候作战能力，可用于反潜、护航、搜索救援、空中预警和电子对抗。使用国有：阿尔及利亚、丹麦、印度、意大利、日本、葡萄牙、英国。</p><ul><li>总体设计：EH-101在规划时就已经确定了基本外形，所有各型EH-101的机身结构、发动机、基本系统和航电系统都相同，主要的不同在于执行不同任务时所需的特殊设备。机身主要由<a href="https://chinois.jinzhao.wiki/wiki/%E9%93%9D%E9%94%82%E5%90%88%E9%87%91">铝锂</a>结构，驾驶舱可容纳一至二名飞行员，机身模组化、防坠机爆炸设计、可收放前三点式起落架。海军型座舱空间29米，民用型为27.5米，通常可载30名乘客含行李。航电采用双<a href="https://chinois.jinzhao.wiki/wiki/%E5%86%97%E9%A4%98">冗余</a>的<a href="https://chinois.jinzhao.wiki/wiki/%E7%B7%9A%E5%82%B3%E9%A3%9B%E6%8E%A7%E7%B3%BB%E7%B5%B1">自动飞行控制系统</a>管制着导航、座舱显示、执行监控、发动机状态。动力引擎采用了<a href="https://chinois.jinzhao.wiki/w/index.php?title=%E4%B8%BB%E5%8B%95%E5%BC%8F%E6%8C%AF%E5%8B%95%E6%8A%91%E5%88%B6&action=edit&redlink=1">主动式振动抑制</a>技术，机舱内噪音和振动低于其他采用涡扇发动机的飞机。因此乘员的疲劳度大幅降低，机身寿命也得到延长。</li></ul><p><img src="\img\5-160914192R3.gif" data-original="https://cdn.jsdelivr.net/gh/qizl19/Typora_PicGo/dbb44aed2e738bd4c1841401ad8b87d6277ff95d-16473576156451.webp" alt="github--lena"></p><ul><li><p>旋翼动力：采用性能和安全性都较高的5片式主旋翼，采用大量碳纤维，提升了韧性和扛扭转强度，同时增强了扛疲劳强度。</p><p>&emsp;&emsp;高性能桨叶出自<a href="https://www.ingentaconnect.com/contentone/ahs/jahs/1987/00000032/00000003/art00005#:~:text=A%20new%20composite%20blade%20has%20been%20designed%20under,design%20on%20performance%2C%20%EE%80%80rotor%EE%80%81%20loads%2C%20and%20aircraft%20vibration.">英国试验旋翼项目(BERP4)</a>，技术原理也就是著名的“模压工艺”。在合模固化工艺过程中，泡沫芯材的热弹性性能提供内压力，使得即使很多铺层的预浸料在摸具表面也能完全压实。因为良好的压缩<a href="http://baike.baidu.com/view/208095.htm">蠕变</a>性能，泡沫芯材可以提供很高的且持久的压力值。在固化周期中模内压力可以达到7bar(1 bar = 0.1Mpa)并保持。需要的峰值压力可以调整，准确地达到<a href="http://baike.baidu.com/view/59374.htm">环氧树脂</a>预浸料的凝胶点。泡沫材料的高力学性能也能提高常常在旋翼中设计很薄的U形梁的失稳强度。和其它任何其它刚性泡沫相比，PMI泡沫超乎寻常的抗疲劳性能，因此可以承受在使用过程中旋翼产生的高动力载荷。使用ROHACELL泡沫芯材的设计，使得直升机旋翼的<a href="http://baike.baidu.com/view/465804.htm">使用寿命</a>得到一个量上的飞跃。</p></li><li><p>机载武器：EH-101海军型可携带4枚鱼雷（意大利海军型为Mk46或MU90）或其他武器；反舰型可携带2枚<a href="https://baike.baidu.com/item/%E7%A9%BA%E9%9D%A2%E5%AF%BC%E5%BC%B9">空面导弹</a>（意大利海军使用Mk2）或其他武器。根据情况，可执行从使用掠海<a href="https://baike.baidu.com/item/%E5%8F%8D%E8%88%B0%E5%AF%BC%E5%BC%B9">反舰导弹</a>攻击主要目标到对走私船进行小型武力威慑等各种任务；军用通用型的武器选择包括登机门或后装货门处安装立轴机枪、机头下部12.7mm机枪转塔、短翼下火箭吊舱，既可作为自卫武器，也可执行轻型攻击任务。</p></li></ul><p><img src="\img\5-160914192R3.gif" data-original="../images/%E6%AC%A7%E6%B4%B2%E7%9B%B4%E5%8D%87%E6%9C%BA/FAP_19602_(6).jpg" alt="FAP_19602_(6)"></p><center style="font-size:14px;color:#000000">葡萄牙空军EH101</center> <p><img src="\img\5-160914192R3.gif" data-original="https://cdn.jsdelivr.net/gh/qizl19/Typora_PicGo/Westland.eh101.merlin.fairford.arp.jpg" alt="github--lena"></p><center style="font-size:14px;color:#000000">英国皇家海军用机HM1</center> <p><img src="\img\5-160914192R3.gif" data-original="https://cdn.jsdelivr.net/gh/qizl19/Typora_PicGo/Eh101_keishicho.jpg" alt="github--lena"></p><center style="font-size:14px;color:#000000">东京警视厅警用EH101</center> <ul><li>性能参数</li></ul><p><img src="\img\5-160914192R3.gif" data-original="https://cdn.jsdelivr.net/gh/qizl19/Typora_PicGo/image-20220315163335691.png" alt="github--lena"></p><h4 id="EC725-H225M-绰号：Super-Cougar-超美洲狮"><a href="#EC725-H225M-绰号：Super-Cougar-超美洲狮" class="headerlink" title="EC725(H225M),绰号：Super Cougar (超美洲狮)"></a>EC725(H225M),绰号：Super Cougar (超美洲狮)</h4><p>&emsp;&emsp;由法国欧洲直升机公司研制的中型军用直升机，民用型号为空中客车H225M直升机，双发涡轴，可以运载29名武装人员和两个驾驶员。服役于阿尔及利亚、加拿大、法国、冰岛、日本、墨西哥、中国、挪威等国家。采用五片旋翼，由座舱上两枚透博梅卡马基拉2A涡轮轴发动机引擎驱动，该引擎采用双通道的全权数位引擎控制（FADEC）系统和能在极低温下运作的防冻系统，机身后方外壁上可挂一个800kg燃油的副油箱，增加了航程和续航时间。</p><p>&emsp;&emsp;主要用来执行特种作战和战斗搜救任务，机身两侧可选装2挺机枪，梁尾位置装有4个雷达干扰发射器，以及探测导弹的“达米恩”告警雷达，大多为自卫型武器。更看重防护与安全。电子信息系统先进，安装的多频率导引系统可将求救信号源标注于地图上，机头下方的<a href="https://baike.baidu.com/item/%E5%89%8D%E8%A7%86%E7%BA%A2%E5%A4%96%E7%B3%BB%E7%BB%9F/5309551">前视红外转塔</a>，可以显示待救助目标的图像，提高救助速度和能力。</p><p><img src="\img\5-160914192R3.gif" data-original="../images/%E6%AC%A7%E6%B4%B2%E7%9B%B4%E5%8D%87%E6%9C%BA/1024px-China_Rescue_Eurocopter_EC-225LP_Super_Puma_Mk2%252B.jpg" alt="1024px-China_Rescue_Eurocopter_EC-225LP_Super_Puma_Mk2%2B"></p><center style="font-size:14px;color:#000000">中国交通运输部救助飞行队EC-225LP</center> <p><img src="\img\5-160914192R3.gif" data-original="https://cdn.jsdelivr.net/gh/qizl19/Typora_PicGo/1024px-ROCAF_EC-225_2251_Left_Side_View_at_Hsinchu_AFB_Apron_20120602.jpg" alt="img"></p><center style="font-size:14px;color:#000000">台湾空军海鸥部队EC225直升机EH101</center> <ul><li>性能：</li></ul><p><img src="\img\5-160914192R3.gif" data-original="https://cdn.jsdelivr.net/gh/qizl19/Typora_PicGo/image-20220316111345291.png" alt="image-20220316111345291"></p><h4 id="EC-665，Tiger-虎式武装直升机"><a href="#EC-665，Tiger-虎式武装直升机" class="headerlink" title="EC-665，Tiger(虎式武装直升机)"></a>EC-665，Tiger(虎式武装直升机)</h4><p>&emsp;&emsp;虎式武装直升机由法国和德国联合研制，欧洲直升机公司（德国戴姆勒宇航和法国马特拉宇航公司1992年合并而成）生产，是世界第一种奖制空作战纳入设计思想并付诸实践的武装直升机。目前装备于德国、法国、西班牙、澳大利亚等国。</p><p><img src="\img\5-160914192R3.gif" data-original="../images/%E6%AC%A7%E6%B4%B2%E7%9B%B4%E5%8D%87%E6%9C%BA/U28P27T1D290328F3DT20050521111724.jpg" alt="img"></p><center style="font-size:14px;color:#000000">虎式直升机三视图</center> <ul><li>总体设计：采用四叶片主尾旋翼，纵列式阶梯状双人座舱（驾驶员位于前座，武器控制员位于后座，便于贴地飞行，且座椅分别偏向中心线的两侧，以提升在后座的炮手的视野。），后三点固定式起落架。设计着重强调：1、强化隐身能力，提高战场存活率（机体80%采用了复合材料，机身使用红外线讯号抑制涂料。）；2、提高武器系统性能；3、优良的整体后勤系统降低生命周期成本。</li><li>动力设计：装备两具MTR-390涡轴发动机，所有重要回路、导航、飞控、通讯与动力系统均采用分离式双重独立备份设计，以增加存活率。</li><li>旋翼设计：虎式直升机采用<a href="https://zhuanlan.zhihu.com/p/367410276"><strong>无铰式四叶片旋翼系统</strong></a>，其旋翼叶片直接固定在桨毂，结构大幅简化，操控时的机械迟滞降低，灵敏度因而增加不少。用一种新开发的弹性轴承来取代轴向铰，不仅操控反应更加敏捷，维修工作也更为简便。</li></ul><p>&emsp;&emsp;由于各国的需求不同，演化出不同的型号。</p><ul><li><p>法国虎式（HAP型）</p><p>&emsp;&emsp;<strong>定位为中型空对空战斗及火力支援直升机</strong>。配备有机首下30毫米GIAT机炮，并配备了全球第一种专为空战设计的直升机机炮射控系统，射击稳定性和精确度极高。翼下可搭载68毫米<a href="https://chinois.jinzhao.wiki/wiki/SNEB%E8%88%AA%E7%A9%BA%E7%81%AB%E7%AE%AD%E5%BD%88">SNEB</a>非制导火箭或20毫米的机炮用于火力支援，以及<a href="https://chinois.jinzhao.wiki/wiki/%E8%A5%BF%E5%8C%97%E9%A2%A8%E4%BE%BF%E6%94%9C%E5%BC%8F%E9%98%B2%E7%A9%BA%E9%A3%9B%E5%BD%88">西北风</a>（又称：米斯特拉尔）空对空导弹。</p><p><img src="\img\5-160914192R3.gif" data-original="../images/%E6%AC%A7%E6%B4%B2%E7%9B%B4%E5%8D%87%E6%9C%BA/R-C.jpg" alt="R-C"></p><center style="font-size:14px;color:#000000">法国虎式HAP型</center> </li><li><p>德国虎式（UAT型）</p><p>&emsp;&emsp;定位为<strong>中型多用途火力支援直升机</strong>，主要用于侦测任务，配备有配备一具SMIF的地狱之神式（Osiris）桅顶观测仪（Mast Mounted Sight，MMS），机鼻装有一具视角30×40°的前视红外线侦测仪，可以进行360°全方位观测。</p><p><img src="\img\5-160914192R3.gif" data-original="../images/%E6%AC%A7%E6%B4%B2%E7%9B%B4%E5%8D%87%E6%9C%BA/b219ebc4b74543a939528e8b1c178a82b901142f.webp" alt="b219ebc4b74543a939528e8b1c178a82b901142f"></p><center style="font-size:14px;color:#000000">虎式的桅顶观测仪（MMS）</center> <p>两侧机翼可装备2枚<a href="https://chinois.jinzhao.wiki/wiki/FIM-92%E5%88%BA%E9%87%9D%E4%BE%BF%E6%94%9C%E5%BC%8F%E9%98%B2%E7%A9%BA%E9%A3%9B%E5%BD%88">AIM-92刺针</a>飞弹，用于空对空作战，没有集成炮塔，但可以应需要加装12.7毫米炮塔，火力逊色于HAP型虎式。</p><p><img src="\img\5-160914192R3.gif" data-original="../images/%E6%AC%A7%E6%B4%B2%E7%9B%B4%E5%8D%87%E6%9C%BA/1024px-Eurocopter_Tiger_2.jpg" alt="img"></p><center style="font-size:14px;color:#000000">德国陆军的虎式UAT型</center> </li><li><p>澳大利亚虎式（ARH型）</p></li></ul><p>  定位为武装侦察直升机，是在HAP型基础上的修改和升级，加装了升级的MTR390发动机，并在施特里克斯视线系统中纳入<a href="https://chinois.jinzhao.wiki/wiki/%E6%BF%80%E5%85%89%E6%8C%87%E7%A4%BA%E5%99%A8">激光指示器</a>以发射<a href="https://chinois.jinzhao.wiki/wiki/AGM-114%E5%9C%B0%E7%8D%84%E7%81%AB%E9%A3%9B%E5%BD%88">AGM-114地狱火飞弹</a>空对地导弹。<a href="https://chinois.jinzhao.wiki/w/index.php?title=%E6%96%AF%E5%86%85%E5%B8%83&action=edit&redlink=1">斯内布</a>非制导火箭也被比利时FZ公司制造的70毫米火箭发射器代替。  </p><p><img src="\img\5-160914192R3.gif" data-original="../images/%E6%AC%A7%E6%B4%B2%E7%9B%B4%E5%8D%87%E6%9C%BA/1024px-Australian_Army_ARH_Tiger_front_view.jpg" alt="img"></p><center style="font-size:14px;color:#000000">澳大利亚陆军虎式直升机</center> <ul><li>性能参数</li></ul><p><img src="\img\5-160914192R3.gif" data-original="../images/%E6%AC%A7%E6%B4%B2%E7%9B%B4%E5%8D%87%E6%9C%BA/image-20220317230949952.png" alt="image-20220317230949952"></p><h4 id="A-129-绰号：Mangusta-猫鼬武装直升机"><a href="#A-129-绰号：Mangusta-猫鼬武装直升机" class="headerlink" title="A-129,绰号：Mangusta,猫鼬武装直升机"></a>A-129,绰号：Mangusta,猫鼬武装直升机</h4><p>&emsp;&emsp;A129武装直升机（A-129 Attack Helicopter）是意大利阿古斯塔公司研制的一款武装攻击直升机，也是欧洲生产的第一种专用攻击直升机。服役于意大利、土耳其和菲律宾（A129国际型即T129）。</p><ul><li><p>总体设计：采用串列式双座驾驶舱，左侧尾桨，轮式固定起落架，后三点布局。机身装有悬臂式短翼，每个短翼装有两个外挂架（4个外挂点上可携带1200千克外挂物，通常携带8枚“陶”反坦克导弹、两挺机枪或81毫米火箭发射舱，另外A-129也有携带发射“毒刺”空对空导弹的能力）。复合材料占整个机身重量的45%。</p><p><img src="\img\5-160914192R3.gif" data-original="../images/%E6%AC%A7%E6%B4%B2%E7%9B%B4%E5%8D%87%E6%9C%BA/Mangusta-A129-schema.png" alt="Mangusta-A129-schema.png"></p><center style="font-size:14px;color:#000000">A129 "猫鼬"武装直升机三视图</center> </li><li><p>动力设计：安装两台安装两台罗尔斯·罗伊斯Gem 1004（A-129）或LHTEC T800-LHT-800（A-129国际型）<a href="https://baike.baidu.com/item/%E6%B6%A1%E8%BD%AE%E8%BD%B4%E5%8F%91%E5%8A%A8%E6%9C%BA/4301709">涡轮轴发动机</a>，采用分开隔离的两套燃油系统，两套供油线路可交叉供油。排气管可安装红外抑制装置，当传动装置被击中，润滑油外漏时，直升机还能坚持飞行30分钟。每台发动机有独立的润滑油冷却系统。发动机的排气装置采用了红外辐射抑制装置。</p></li><li><p>旋翼设计：A-129采用<strong>全铰接式4片主旋翼</strong>（国际型改用五片主旋翼）和<strong>半刚性三角铰接式2片尾桨</strong>。主旋翼装于三维球形弹性轴上（每个叶片一个），其优点是不必对桨毂和轴承进行润滑，并减小了旋翼阻力和直升机的震动，特别是90度急转弯这样的高过载机动时。主旋翼大梁采用碳纤维和凯芙拉制造，复合材料蒙皮，前缘和后缘由蜂窝结构材料制造，旋翼前缘抗磨包条由不锈钢制造，桨尖较易更换。所有机械连杆和活动件都装在旋翼主轴内部，以防外来物损伤和结冰，并可减弱雷达信号。</p></li></ul><p>  后来，为了出口，研制了A-129国际型，增大了动力，改进了航电设备。（旋翼系统由4片桨叶改成5片桨叶）。土耳其订购了该型号，命名为T129.有意思的是，意大利阿古斯塔公司打包赠送了T129的完整知识产权和外销权力，所以土耳其的T129也开始出口，对A129的市场造成了极大的冲击。但A129由于本身的竞争实力不强，在国际贸易市场上难以敌过其他国家的武装直升机，使用国很少。</p><p><img src="\img\5-160914192R3.gif" data-original="../images/%E6%AC%A7%E6%B4%B2%E7%9B%B4%E5%8D%87%E6%9C%BA/fcfaaf51f3deb48f534b3178fe1f3a292df57872.webp" alt="fcfaaf51f3deb48f534b3178fe1f3a292df57872"></p><center style="font-size:14px;color:#000000">A129国际型武装直升机三视图</center> <p><img src="\img\5-160914192R3.gif" data-original="../images/%E6%AC%A7%E6%B4%B2%E7%9B%B4%E5%8D%87%E6%9C%BA/format,f_auto.jpeg" alt="img"></p><center style="font-size:14px;color:#000000">A129 "猫鼬"武装直升机</center> <p><img src="\img\5-160914192R3.gif" data-original="../images/%E6%AC%A7%E6%B4%B2%E7%9B%B4%E5%8D%87%E6%9C%BA/2-reconnaissance.webp" alt="2-reconnaissance"></p><center style="font-size:14px;color:#000000">T129武装直升机</center> <ul><li>性能参数</li></ul><p><img src="\img\5-160914192R3.gif" data-original="../images/%E6%AC%A7%E6%B4%B2%E7%9B%B4%E5%8D%87%E6%9C%BA/image-20220318125241555.png" alt="image-20220318125241555"></p><p>资料来源：</p><p>[1]<a href="https://baike.baidu.com/">https://baike.baidu.com/</a></p><p>[2]<a href="https://chinois.jinzhao.wiki/wiki/Wikipedia:%E9%A6%96%E9%A1%B5">https://chinois.jinzhao.wiki/wiki/Wikipedia:%E9%A6%96%E9%A1%B5</a></p><p>[3]<a href="https://tv.cctv.com/2022/03/10/VIDEb64dt9Uz9lz8hESdhjgw220310.shtml?spm=C53074552346.PlpOTFgsFbqA.0.0">https://tv.cctv.com/2022/03/10/VIDEb64dt9Uz9lz8hESdhjgw220310.shtml?spm=C53074552346.PlpOTFgsFbqA.0.0</a></p>]]></content>
      
      
      <categories>
          
          <category> 飞机资料整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 航空 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用matlab实现排序问题</title>
      <link href="/p/3694e76f.html"/>
      <url>/p/3694e76f.html</url>
      
        <content type="html"><![CDATA[<h6 id="请学习遍历排序，冒泡排序，快速排序算法，画出3种算法的流程图（从小到大排序），并分析3种排序方法的时间复杂度。"><a href="#请学习遍历排序，冒泡排序，快速排序算法，画出3种算法的流程图（从小到大排序），并分析3种排序方法的时间复杂度。" class="headerlink" title="请学习遍历排序，冒泡排序，快速排序算法，画出3种算法的流程图（从小到大排序），并分析3种排序方法的时间复杂度。"></a>请学习遍历排序，冒泡排序，快速排序算法，画出3种算法的流程图（从小到大排序），并分析3种排序方法的时间复杂度。</h6><ul><li><p>遍历排序</p><ul><li><p>原理:对待排序数组进行遍历，第一次取第一个数，然后把它和之后的所有数进行比较，范围为1 ~ n，找出最大的数，并将它放在最后一位，然后再从第一位开始，比较范围为1 ~ n-1，找出第二大的数，放置在倒数第二位，以此类推。</p></li><li><p>流程图</p><p><img src="\img\5-160914192R3.gif" data-original="/images/port/%E9%81%8D%E5%8E%86flowchart.png"></p></li><li><p>复杂度：共有两层循环，第一层循环划定比较的范围，第二层进行比较。其外层循环执行 n - 1次。内层循环最多的时候执行n次，最少的时候执行1次，平均执行 (n+1)/2次。所以循环体内的比较约执行 n(n-1)/2次，复杂度为$O(n^2)$。</p></li></ul></li><li><p>冒泡排序</p><ul><li><p>原理：对数组进行遍历，第一次遍历从数列第一项开始，比较相邻的两项，并且交换顺序排错的项，使每个局部的最大值放在正确的位置。第二次遍历从第二项开始，操作与第一遍一致，直至数组末尾。</p></li><li><p>流程图</p><p><img src="\img\5-160914192R3.gif" data-original="/images/port/%E5%86%92%E6%B3%A1flowchart.png"></p></li><li><p>复杂度</p><p>​       共有两层循环，第一层循环划定比较的范围，第二层进行比较和操作。其外层循环执行 $n - 1$次。内层循环最多的时候执行n次，最少的时候执行1次，平均执行 (n+1)/2次。所以循环体内的比较交换约执行 n(n-1)/2次，复杂度为$O(n^2)$。</p><p>​       按最为复杂的情况为例计算，每次比较都会有三次操作，第一轮共有n次比较，第二次共有n-1次，以此类推：</p></li></ul></li></ul><p>$$<br>sum = 3\times[n+(n-1)+(n-2)+…+2+1)]=3\times \frac{n\times (n-1)}{2}=\frac{3}{2}(n^2-n)\<br>    \therefore 复杂度为O(n^2)<br>$$</p><ul><li><p>快速排序</p><ul><li><p>原理:先去确定一个基准数，通过一趟排序将要排序的数据分割成独立的两部分，其中基准数左边的一部分的所有数据比基准数小，基准数右边的所有数据要大于基准数，再按这种方法对这两部分数据分别进行快速排序，直至每部分都只有一个数时结束。整个排序过程可以递归进行，使整个数据变成有序序列。</p></li><li><p>流程图</p><p>快速排序算法通过多次比较和交换来实现排序，其排序流程如下： </p><ul><li><p>首先设定一个分界值，通过该分界值将数组分成左右两部分。 </p></li><li><p>将大于或等于分界值的数据集中到数组右边，小于分界值的数据集中到数组的左边。此时，左边部分中各元素都小于或等于分界值，而右边部分中各元素都大于或等于分界值。 </p></li><li><p>然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两部分，同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理。</p></li><li><p>重复上述过程，可以看出，这是一个递归定义。通过递归将左侧部分排好序后，再递归排好右侧部分的顺序。当左、右两个部分各数据排序完成后，整个数组的排序也就完成了。</p><p>一次排序的流程图：</p></li></ul><p><img src="\img\5-160914192R3.gif" data-original="/images/port/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.png"></p></li><li><p>复杂度</p><p>设n为待排序数组中的元素个数，$T(n)$为算法需要的时间复杂度，则<br>$$<br>T(n)=\begin{cases}<br>D(1)&amp; \text{n$\le$1}\<br>D(n)+T(I_1)+T(I_2)&amp; \text{n&gt;1}<br>\end{cases}<br>$$<br>​                   其中$D(n)=n-1$，为一次快排需要的比较次数，一次快排结束后将数组分为两部分$I_1,I_2$。</p></li></ul></li></ul><p>​                  最好情况下，每一次划分正好将数组分为长度相等的两半</p><p>$$<br>T(n)=\begin{cases}<br>      D(1)&amp; \text{n$\le$1} \<br>      D(n)+T(n/2)+T(n/2)&amp; \text{n&gt;1}<br>      \end{cases}<br>      \<br>T(n)=D(n)+2T(n/2)=…=D(n)+2D(n/2)+…+2^kD(n/2^k)\<br>      =n-1+2(n/2-1)+…+2^k(n/2^k-1)\<br>      =n-1+n-2+…+n-2^k\<br>      \because k = log_x n\<br>      \therefore 原式 = (k+1)n-(1+2+…+2^k)\<br>      =(k+1)-\frac{2^0(1-2^{k+1})}{1-2}\<br>      =(k+1)n-2·2^k+1\<br>      =nlog_2n-n+1\sim O(nlog_2n)<br>$$<br>​                最坏的情况：每次划分都将数组分为了1和n-1两部分</p><p>$$<br>T(n)=\begin{cases}<br>      D(1)&amp; \text{n$\le$1}\<br>      D(n)+T(1)+T(n-1)&amp; \text{n&gt;1}<br>      \end{cases}<br>      \<br>      T(n)=D(n)+T(n-1)=D(n)+D(n-1)+T(n-2)\<br>      =D(n)+D(n-1)+D(n-2)+…+D(1)\<br>      =n-1+n-2+…+1+0\<br>      =\frac{n(n-1)}{2}\sim O(n^2)<br>$$<br>​                   平均时间复杂度：任意一种划分情况出现的概率都相等</p><p>$$<br>T(n)=D(n)+\frac{1}{n}\sum_{i=0}^{n-1}[T(i)+T(n-i)]=D(n)+\frac{2}{n}\sum_{i=0}^{n-1}T(i)\<br>      T(n-1)=D(n-1)+\frac{2}{n-1}\sum_{i=0}^{n-2}T(i)\<br>      \therefore nT(n)-(n-1)T(n-1)=2(n-1)+2T(n-1)\<br>      \frac{T(n)}{n+1}=\frac{T(n-1)}{n}+\frac{2(n-1)}{n(n+1)}\<br>      \therefore B(n)=\frac{T(n)}{n+1},得B(n)-B(n-1)=\frac{2(n-1)}{n(n+1)}\<br>      可展开该递推式：B(n)=B(n-1)+\frac{2(n-1)}{n(n+1)}\<br>      =B(n-2)+\frac{2(n-2)}{n(n-1)}+\frac{2(n-1)}{n(n+1)}=B(1)+\sum_{i=1}^n\frac{2(i-1)}{i(i+1)}\<br>      =0+\sum_{i=1}^n[\frac{2}{i}-\frac{4}{i(i+1)}]=\sum_{i=1}^n\frac{2}{i}-4\sum_{i=1}^n[\frac{1}{i}-\frac{1}{i+1}]=\sum_{i=1}^n\frac{2}{i}-\frac{4n}{n+1}\<br>      \approx 2(ln(n)+0.577)-\frac{4n}{n+1}\<br>      \therefore T(n)=(n+1)B(n)=2(n+1)(ln(n)+0.577)-4n=2nlnn-2.846n+1.154\sim O(nlog_2n)<br>$$</p><ul><li>所以，快速排序最好时间复杂度为 $O(nlog_2n)$ ,最坏时间复杂度为$O(n^2)$ ,平均时间复杂度为 $O(nlog_2n)$</li></ul><h6 id="请自行编写程序完成三种排序，但数据集均为-0，1-之间的浮点数时，比较上述三种算法及matlab内置排序sort函数的快慢。"><a href="#请自行编写程序完成三种排序，但数据集均为-0，1-之间的浮点数时，比较上述三种算法及matlab内置排序sort函数的快慢。" class="headerlink" title="请自行编写程序完成三种排序，但数据集均为[0，1]之间的浮点数时，比较上述三种算法及matlab内置排序sort函数的快慢。"></a>请自行编写程序完成三种排序，但数据集均为[0，1]之间的浮点数时，比较上述三种算法及matlab内置排序sort函数的快慢。</h6><ul><li><p>遍历排序</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">output</span> = <span class="title">traverse</span><span class="params">(input)</span></span></span><br><span class="line"><span class="comment">%TRAVERSE 遍历排序函数</span></span><br><span class="line">    n=<span class="built_in">length</span>(input);</span><br><span class="line">    x = input;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">        amin = x(<span class="number">1</span>);</span><br><span class="line">        mini = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:n-<span class="built_in">i</span>      </span><br><span class="line">            <span class="keyword">if</span> amin &gt;= x(<span class="built_in">j</span>+<span class="number">1</span>)</span><br><span class="line">                amin = x(<span class="built_in">j</span>+<span class="number">1</span>);</span><br><span class="line">                mini = <span class="built_in">j</span>+<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">j</span> = <span class="built_in">j</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        x(n+<span class="number">1</span>)=amin;</span><br><span class="line">        x(mini)=[];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    output = x;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>冒泡排序</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">output</span> = <span class="title">bubble</span><span class="params">(input)</span></span></span><br><span class="line"><span class="comment">%BUBBLE 冒泡排序函数</span></span><br><span class="line">    n=<span class="built_in">length</span>(input);</span><br><span class="line">    x = input;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:n-<span class="built_in">i</span></span><br><span class="line">            <span class="keyword">if</span> x(<span class="built_in">j</span>)&gt;x(<span class="built_in">j</span>+<span class="number">1</span>)</span><br><span class="line">                t = x(<span class="built_in">j</span>);</span><br><span class="line">                x(<span class="built_in">j</span>) = x(<span class="built_in">j</span>+<span class="number">1</span>);</span><br><span class="line">                x(<span class="built_in">j</span>+<span class="number">1</span>) = t;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    output = x;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>快速排序</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">output</span>=<span class="title">quick_sort</span><span class="params">(intput,low,high)</span></span></span><br><span class="line"><span class="comment">%QUICK 快排函数</span></span><br><span class="line">    n=<span class="built_in">length</span>(intput);</span><br><span class="line">    x = intput;</span><br><span class="line">    <span class="keyword">if</span> low&lt;high</span><br><span class="line">        [x,key]=getkey(x,low,high);</span><br><span class="line">        x=quick_sort(x,low,key<span class="number">-1</span>);</span><br><span class="line">        x=quick_sort(x,key+<span class="number">1</span>,high);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    output = x;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[x,index]</span>=<span class="title">getkey</span><span class="params">(x,i,j)</span></span></span><br><span class="line">    key=x(<span class="built_in">i</span>);</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">i</span>&lt;<span class="built_in">j</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">i</span>&lt;<span class="built_in">j</span> &amp;&amp; x(<span class="built_in">j</span>)&gt;=key</span><br><span class="line">            <span class="built_in">j</span>=<span class="built_in">j</span><span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">i</span>&lt;<span class="built_in">j</span></span><br><span class="line">            x(<span class="built_in">i</span>)=x(<span class="built_in">j</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">i</span>&lt;<span class="built_in">j</span> &amp;&amp; x(<span class="built_in">i</span>)&lt;=key</span><br><span class="line">            <span class="built_in">i</span>=<span class="built_in">i</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">i</span>&lt;<span class="built_in">j</span></span><br><span class="line">            x(<span class="built_in">j</span>)=x(<span class="built_in">i</span>);  </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    x(<span class="built_in">i</span>)=key;</span><br><span class="line">    index=<span class="built_in">i</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>比较快慢（对于大小在[0,1]之间的浮点数，取长度为10，100，1000来计算）</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> =<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">    x = <span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">    tic;x1 = traverse(x);</span><br><span class="line">    t1(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x2 = bubble(x);</span><br><span class="line">    t2(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x3 = quick_sort(x,<span class="number">1</span>,<span class="built_in">length</span>(x));</span><br><span class="line">    t3(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x4 = <span class="built_in">sort</span>(x);</span><br><span class="line">    t4(<span class="built_in">i</span>) = toc;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fprintf(<span class="string">&quot;数组长度为10时\n遍历排序耗时%fs\n冒泡排序耗时%fs\n快速排序耗时%fs\nsort排序耗时%fs\n&quot;</span>,<span class="built_in">mean</span>(t1),<span class="built_in">mean</span>(t2),<span class="built_in">mean</span>(t3),<span class="built_in">mean</span>(t4))</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> =<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">    x = <span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">    tic;x1 = traverse(x);</span><br><span class="line">    t1(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x2 = bubble(x);</span><br><span class="line">    t2(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x3 = quick_sort(x,<span class="number">1</span>,<span class="built_in">length</span>(x));</span><br><span class="line">    t3(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x4 = <span class="built_in">sort</span>(x);</span><br><span class="line">    t4(<span class="built_in">i</span>) = toc;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fprintf(<span class="string">&quot;数组长度为100时\n遍历排序耗时%fs\n冒泡排序耗时%fs\n快速排序耗时%fs\nsort排序耗时%fs\n&quot;</span>,<span class="built_in">mean</span>(t1),<span class="built_in">mean</span>(t2),<span class="built_in">mean</span>(t3),<span class="built_in">mean</span>(t4))</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> =<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">    x = <span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">1000</span>);</span><br><span class="line">    tic;x1 = traverse(x);</span><br><span class="line">    t1(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x2 = bubble(x);</span><br><span class="line">    t2(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x3 = quick_sort(x,<span class="number">1</span>,<span class="built_in">length</span>(x));</span><br><span class="line">    t3(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x4 = <span class="built_in">sort</span>(x);</span><br><span class="line">    t4(<span class="built_in">i</span>) = toc;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fprintf(<span class="string">&quot;数组长度为1000时\n遍历排序耗时%fs\n冒泡排序耗时%fs\n快速排序耗时%fs\nsort排序耗时%fs\n&quot;</span>,<span class="built_in">mean</span>(t1),<span class="built_in">mean</span>(t2),<span class="built_in">mean</span>(t3),<span class="built_in">mean</span>(t4))</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> =<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">    x = <span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">10000</span>);</span><br><span class="line">    tic;x1 = traverse(x);</span><br><span class="line">    t1(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x2 = bubble(x);</span><br><span class="line">    t2(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x3 = quick_sort(x,<span class="number">1</span>,<span class="built_in">length</span>(x));</span><br><span class="line">    t3(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x4 = <span class="built_in">sort</span>(x);</span><br><span class="line">    t4(<span class="built_in">i</span>) = toc;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fprintf(<span class="string">&quot;数组长度为10000时\n遍历排序耗时%fs\n冒泡排序耗时%fs\n快速排序耗时%fs\nsort排序耗时%fs\n&quot;</span>,<span class="built_in">mean</span>(t1),<span class="built_in">mean</span>(t2),<span class="built_in">mean</span>(t3),<span class="built_in">mean</span>(t4))</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">数组长度为<span class="number">10</span>时</span><br><span class="line">遍历排序耗时<span class="number">0.000017</span>s</span><br><span class="line">冒泡排序耗时<span class="number">0.000002</span>s</span><br><span class="line">快速排序耗时<span class="number">0.000004</span>s</span><br><span class="line"><span class="built_in">sort</span>排序耗时<span class="number">0.000002</span>s</span><br><span class="line">数组长度为<span class="number">100</span>时</span><br><span class="line">遍历排序耗时<span class="number">0.000148</span>s</span><br><span class="line">冒泡排序耗时<span class="number">0.000034</span>s</span><br><span class="line">快速排序耗时<span class="number">0.000028</span>s</span><br><span class="line"><span class="built_in">sort</span>排序耗时<span class="number">0.000004</span>s</span><br><span class="line">数组长度为<span class="number">1000</span>时</span><br><span class="line">遍历排序耗时<span class="number">0.003035</span>s</span><br><span class="line">冒泡排序耗时<span class="number">0.002749</span>s</span><br><span class="line">快速排序耗时<span class="number">0.000312</span>s</span><br><span class="line"><span class="built_in">sort</span>排序耗时<span class="number">0.000035</span>s</span><br><span class="line">数组长度为<span class="number">10000</span>时</span><br><span class="line">遍历排序耗时<span class="number">0.283688</span>s</span><br><span class="line">冒泡排序耗时<span class="number">0.280093</span>s</span><br><span class="line">快速排序耗时<span class="number">0.032537</span>s</span><br><span class="line"><span class="built_in">sort</span>排序耗时<span class="number">0.000263</span>s</span><br></pre></td></tr></table></figure><p>说明：可以根据结果看出，对于大小在[0,1]之间的浮点数，四种排序方法速度从快到慢为：sort&gt;快排&gt;冒泡&gt;遍历</p></li></ul><h6 id="针对上面的数据集，验证3种算法的时间复杂度，若数据集均为-0-10-之间的整数，结果又如何？为什么会这样。"><a href="#针对上面的数据集，验证3种算法的时间复杂度，若数据集均为-0-10-之间的整数，结果又如何？为什么会这样。" class="headerlink" title="针对上面的数据集，验证3种算法的时间复杂度，若数据集均为[0,10]之间的整数，结果又如何？为什么会这样。"></a>针对上面的数据集，验证3种算法的时间复杂度，若数据集均为[0,10]之间的整数，结果又如何？为什么会这样。</h6><ul><li><p>若数据集均为[0,10]之间的整数</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> =<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">    x = <span class="built_in">round</span>(<span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">10</span>)*<span class="number">10</span>);</span><br><span class="line">    tic;x1 = traverse(x);</span><br><span class="line">    t1(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x2 = bubble(x);</span><br><span class="line">    t2(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x3 = quick_sort(x,<span class="number">1</span>,<span class="built_in">length</span>(x));</span><br><span class="line">    t3(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x4 = <span class="built_in">sort</span>(x);</span><br><span class="line">    t4(<span class="built_in">i</span>) = toc;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fprintf(<span class="string">&quot;数组长度为10时\n遍历排序耗时%fs\n冒泡排序耗时%fs\n快速排序耗时%fs\nsort排序耗时%fs\n&quot;</span>,<span class="built_in">mean</span>(t1),<span class="built_in">mean</span>(t2),<span class="built_in">mean</span>(t3),<span class="built_in">mean</span>(t4))</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> =<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">    x = <span class="built_in">round</span>(<span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">100</span>)*<span class="number">10</span>);</span><br><span class="line">    tic;x1 = traverse(x);</span><br><span class="line">    t1(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x2 = bubble(x);</span><br><span class="line">    t2(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x3 = quick_sort(x,<span class="number">1</span>,<span class="built_in">length</span>(x));</span><br><span class="line">    t3(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x4 = <span class="built_in">sort</span>(x);</span><br><span class="line">    t4(<span class="built_in">i</span>) = toc;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fprintf(<span class="string">&quot;数组长度为100时\n遍历排序耗时%fs\n冒泡排序耗时%fs\n快速排序耗时%fs\nsort排序耗时%fs\n&quot;</span>,<span class="built_in">mean</span>(t1),<span class="built_in">mean</span>(t2),<span class="built_in">mean</span>(t3),<span class="built_in">mean</span>(t4))</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> =<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">    x = <span class="built_in">round</span>(<span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">1000</span>)*<span class="number">10</span>);</span><br><span class="line">    tic;x1 = traverse(x);</span><br><span class="line">    t1(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x2 = bubble(x);</span><br><span class="line">    t2(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x3 = quick_sort(x,<span class="number">1</span>,<span class="built_in">length</span>(x));</span><br><span class="line">    t3(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x4 = <span class="built_in">sort</span>(x);</span><br><span class="line">    t4(<span class="built_in">i</span>) = toc;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fprintf(<span class="string">&quot;数组长度为1000时\n遍历排序耗时%fs\n冒泡排序耗时%fs\n快速排序耗时%fs\nsort排序耗时%fs\n&quot;</span>,<span class="built_in">mean</span>(t1),<span class="built_in">mean</span>(t2),<span class="built_in">mean</span>(t3),<span class="built_in">mean</span>(t4))</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> =<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">    x = <span class="built_in">round</span>(<span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">10000</span>)*<span class="number">10</span>);</span><br><span class="line">    tic;x1 = traverse(x);</span><br><span class="line">    t1(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x2 = bubble(x);</span><br><span class="line">    t2(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x3 = quick_sort(x,<span class="number">1</span>,<span class="built_in">length</span>(x));</span><br><span class="line">    t3(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x4 = <span class="built_in">sort</span>(x);</span><br><span class="line">    t4(<span class="built_in">i</span>) = toc;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fprintf(<span class="string">&quot;数组长度为10000时\n遍历排序耗时%fs\n冒泡排序耗时%fs\n快速排序耗时%fs\nsort排序耗时%fs\n&quot;</span>,<span class="built_in">mean</span>(t1),<span class="built_in">mean</span>(t2),<span class="built_in">mean</span>(t3),<span class="built_in">mean</span>(t4))</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">数组长度为<span class="number">10</span>时</span><br><span class="line">遍历排序耗时<span class="number">0.000016</span>s</span><br><span class="line">冒泡排序耗时<span class="number">0.000004</span>s</span><br><span class="line">快速排序耗时<span class="number">0.000004</span>s</span><br><span class="line"><span class="built_in">sort</span>排序耗时<span class="number">0.000002</span>s</span><br><span class="line">数组长度为<span class="number">100</span>时</span><br><span class="line">遍历排序耗时<span class="number">0.000154</span>s</span><br><span class="line">冒泡排序耗时<span class="number">0.000035</span>s</span><br><span class="line">快速排序耗时<span class="number">0.000033</span>s</span><br><span class="line"><span class="built_in">sort</span>排序耗时<span class="number">0.000004</span>s</span><br><span class="line">数组长度为<span class="number">1000</span>时</span><br><span class="line">遍历排序耗时<span class="number">0.003092</span>s</span><br><span class="line">冒泡排序耗时<span class="number">0.002701</span>s</span><br><span class="line">快速排序耗时<span class="number">0.000464</span>s</span><br><span class="line"><span class="built_in">sort</span>排序耗时<span class="number">0.000023</span>s</span><br><span class="line">数组长度为<span class="number">10000</span>时</span><br><span class="line">遍历排序耗时<span class="number">0.300904</span>s</span><br><span class="line">冒泡排序耗时<span class="number">0.274208</span>s</span><br><span class="line">快速排序耗时<span class="number">0.135769</span>s</span><br><span class="line"><span class="built_in">sort</span>排序耗时<span class="number">0.000229</span>s</span><br></pre></td></tr></table></figure><p>说明：可以根据结果看出，对于大小在[0,10]之间的整数，四种排序方法速度从大到小为：sort&gt;快速&gt;冒泡&gt;遍历</p><p>结果与对浮点数排序一致，各种比较操作、赋值操作本质上对整数或是浮点数的运算速度接近，所以结果并不会出现太大的区别</p></li></ul><h6 id="调研并实现一种算法，使得对数据集均为-0-10-之间的整数，算法复杂度低于快速排序。"><a href="#调研并实现一种算法，使得对数据集均为-0-10-之间的整数，算法复杂度低于快速排序。" class="headerlink" title="调研并实现一种算法，使得对数据集均为[0,10]之间的整数，算法复杂度低于快速排序。"></a>调研并实现一种算法，使得对数据集均为[0,10]之间的整数，算法复杂度低于快速排序。</h6><p>​          答：可用希尔排序。</p><ul><li><p>希尔排序介绍</p><ul><li>希尔排序是将待排序的数组元素按下标的一定增量分组 ，分成多个子序列，然后对各个子序列进行直接插入排序算法排序；然后依次缩减增量再进行排序，直到增量为1时，进行最后一次直接插入排序，排序结束。</li></ul></li><li><p>计数排序复杂度为$O(n^{1.3})$，当排序的数是0~10范围内的数且n&gt;2.5时，计数排序复杂度低于快排复杂度$O(nlog_2(n))$。</p></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">output</span> = <span class="title">xier</span><span class="params">(input)</span></span></span><br><span class="line"><span class="comment">%XIER 希尔排序函数</span></span><br><span class="line">    x = input;</span><br><span class="line">    n = <span class="built_in">length</span>(x);</span><br><span class="line">    gap=<span class="built_in">floor</span>(n/<span class="number">2</span>); <span class="comment">%设置初始增量，一般取为数组长度的一半</span></span><br><span class="line">    <span class="keyword">while</span> gap&gt;<span class="number">0</span></span><br><span class="line">        <span class="built_in">i</span>=gap;</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">i</span>&lt;n</span><br><span class="line">            <span class="built_in">j</span>=<span class="built_in">i</span>;</span><br><span class="line">            current = x(<span class="built_in">i</span>+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> <span class="built_in">j</span>-gap&gt;=<span class="number">0</span> &amp;&amp; current&lt;x(<span class="built_in">j</span>-gap+<span class="number">1</span>) <span class="comment">% 若后面的值大于前面的值，则交换</span></span><br><span class="line">                x(<span class="built_in">j</span>+<span class="number">1</span>)=x(<span class="built_in">j</span>-gap+<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">j</span>=<span class="built_in">j</span>-gap;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            x(<span class="built_in">j</span>+<span class="number">1</span>)=current;</span><br><span class="line">            <span class="built_in">i</span>=<span class="built_in">i</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        gap=<span class="built_in">floor</span>(gap/<span class="number">2</span>); <span class="comment">% 每次按增量遍历结束后，将增量缩小为原来的1/2，直至gap=0</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    output = x;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li><p>比较</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> =<span class="number">1</span>:<span class="number">10</span> </span><br><span class="line">    x = <span class="built_in">round</span>(<span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">10</span>)*<span class="number">10</span>);</span><br><span class="line">    tic;x1 = quick_sort(x,<span class="number">1</span>,<span class="built_in">length</span>(x));</span><br><span class="line">    t1(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x2 = xier(x);</span><br><span class="line">    t2(<span class="built_in">i</span>) = toc;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fprintf(<span class="string">&quot;数组长度为10时，快速排序耗时%fs\n希尔排序耗时%fs\n&quot;</span>,<span class="built_in">mean</span>(t1),<span class="built_in">mean</span>(t2))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> =<span class="number">1</span>:<span class="number">10</span> </span><br><span class="line">    x = <span class="built_in">round</span>(<span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">100</span>)*<span class="number">10</span>);</span><br><span class="line">    tic;x1 = quick_sort(x,<span class="number">1</span>,<span class="built_in">length</span>(x));</span><br><span class="line">    t1(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x2 = xier(x);</span><br><span class="line">    t2(<span class="built_in">i</span>) = toc;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fprintf(<span class="string">&quot;数组长度为100时，快速排序耗时%fs\n希尔排序耗时%fs\n&quot;</span>,<span class="built_in">mean</span>(t1),<span class="built_in">mean</span>(t2))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> =<span class="number">1</span>:<span class="number">10</span> </span><br><span class="line">    x = <span class="built_in">round</span>(<span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">100</span>)*<span class="number">10</span>);</span><br><span class="line">    tic;x1 = quick_sort(x,<span class="number">1</span>,<span class="built_in">length</span>(x));</span><br><span class="line">    t1(<span class="built_in">i</span>) = toc;</span><br><span class="line">    tic;x2 = xier(x);</span><br><span class="line">    t2(<span class="built_in">i</span>) = toc;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fprintf(<span class="string">&quot;数组长度为100时，快速排序耗时%fs\n希尔排序耗时%fs\n&quot;</span>,<span class="built_in">mean</span>(t1),<span class="built_in">mean</span>(t2))</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数组长度为<span class="number">10</span>时，快速排序耗时<span class="number">0.000163</span>s</span><br><span class="line">希尔排序耗时<span class="number">0.000059</span>s</span><br><span class="line">数组长度为<span class="number">100</span>时，快速排序耗时<span class="number">0.000092</span>s</span><br><span class="line">希尔排序耗时<span class="number">0.000049</span>s</span><br><span class="line">数组长度为<span class="number">100</span>时，快速排序耗时<span class="number">0.000075</span>s</span><br><span class="line">希尔排序耗时<span class="number">0.000040</span>s</span><br></pre></td></tr></table></figure><p>可看出，希尔排序耗时均小于快速排序。</p></li></ul><h6 id="利用自己实现的算法，编写一个GUI演示窗口。要求：能够输入一列向量（长度不超过15），选择一种排序算法，动态绘制排序过程。"><a href="#利用自己实现的算法，编写一个GUI演示窗口。要求：能够输入一列向量（长度不超过15），选择一种排序算法，动态绘制排序过程。" class="headerlink" title="利用自己实现的算法，编写一个GUI演示窗口。要求：能够输入一列向量（长度不超过15），选择一种排序算法，动态绘制排序过程。"></a>利用自己实现的算法，编写一个GUI演示窗口。要求：能够输入一列向量（长度不超过15），选择一种排序算法，动态绘制排序过程。</h6><ul><li><p>编写绘图函数，并在之前编写的排序函数中当数据变化后调用绘图函数</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span><span class="params">(x)</span></span></span><br><span class="line">    time=<span class="number">0.3</span>; </span><br><span class="line">    clf; <span class="comment">% 清除之前的图形</span></span><br><span class="line">    bar(x); <span class="comment">% 绘制柱状图</span></span><br><span class="line">    pause(time); <span class="comment">% 延时函数，使得结果更易观察</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>编写APP（使用App designer）</p><img src="\img\5-160914192R3.gif" data-original="/images/port/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-11-17%20171904.jpg" style="zoom:80%;" /><p>共包括四个组件：</p><ul><li>EditField:用于输入待排序的数组，数组各元素之间用空格隔开即可</li><li>ListBox:输入待排序数组后，选择排序方法，共用四种供选择</li><li>StartButton:完成以上两步之后，点击该按钮即可开始排序</li><li>EditField_2:排序完成后显示排序好的（从小到大）的数组</li></ul><p>点击打开文件“sort_tool_exported.m”,点击运行即可显示GUI。</p><p>点击“Start”后，弹出figure图窗，动态显示排序过程</p><img src="\img\5-160914192R3.gif" data-original="/images/port/image-20211117172901126.png" style="zoom:67%;" /></li></ul><p>排序结束后，会在EditField2窗口中显示排序好的数组。</p>]]></content>
      
      
      <categories>
          
          <category> code记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/p/4a17b156.html"/>
      <url>/p/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
